b'CmltcG9ydCBzb2NrZXQKaW1wb3J0IGpzb24KaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHRpbWUKaW1wb3J0IG9zCmltcG9ydCBzaHV0aWwKaW1wb3J0IHN5cwppbXBvcnQgd2ViYnJvd3NlcgppbXBvcnQgY3YyCmltcG9ydCBudW1weSBhcyBucAoKZGVmIHJlbGlhYmxlX3NlbmQoZGF0YSk6CiAgICBqc29uZGF0YSA9IGpzb24uZHVtcHMoZGF0YSkKICAgIHMuc2VuZChqc29uZGF0YS5lbmNvZGUoKSkKCmRlZiByZWxpYWJsZV9yZWN2KCk6CiAgICBkYXRhID0gJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBkYXRhID0gZGF0YSArIHMucmVjdigxMDI0KS5kZWNvZGUoKS5yc3RyaXAoKQogICAgICAgICAgICByZXR1cm4ganNvbi5sb2FkcyhkYXRhKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICBjb250aW51ZQoKZGVmIHBlcnNpc3QocmVnX25hbWUsIGNvcHlfbmFtZSk6CiAgICBmaWxlX2xvY2F0aW9uID0gb3MuZW52aXJvblsnYXBwZGF0YSddICsgJ1wnICsgY29weV9uYW1lCiAgICB0cnk6CiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGZpbGVfbG9jYXRpb24pOgogICAgICAgICAgICBzaHV0aWwuY29weWZpbGUoc3lzLmV4ZWN1dGFibGUsIGZpbGVfbG9jYXRpb24pCiAgICAgICAgICAgIHN1YnByb2Nlc3MuY2FsbCgncmVnIGFkZCBIS0NVXFNvZnR3YXJlXE1pY3Jvc29mdFxXaW5kb3dzXEN1cnJlbnRWZXJzaW9uXFJ1biAvdiAnICsgcmVnX25hbWUgKyAnIC90IFJFR19TWiAvZCAiJyArIGZpbGVfbG9jYXRpb24gKyAnIicsIHNoZWxsPVRydWUpCiAgICAgICAgICAgIHJlbGlhYmxlX3NlbmQoJ1srXSBDcmVhdGVkIFBlcnNpc3RlbmNlIFdpdGggUmVnIEtleTogJyArIHJlZ19uYW1lKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJlbGlhYmxlX3NlbmQoJ1srXSBQZXJzaXN0ZW5jZSBBbHJlYWR5IEV4aXN0cycpCiAgICBleGNlcHQ6CiAgICAgICAgcmVsaWFibGVfc2VuZCgnWytdIEVycm9yIENyZWF0aW5nIFBlcnNpc3RlbmNlIFdpdGggVGhlIFRhcmdldCBNYWNoaW5lJykKCmRlZiBjb25uZWN0aW9uKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIHRpbWUuc2xlZXAoMjApCiAgICAgICAgdHJ5OgogICAgICAgICAgICBzLmNvbm5lY3QoKCcxOTIuMTY4LjEuMTkwJywgNTU1NSkpCiAgICAgICAgICAgIHNoZWxsKCkKICAgICAgICAgICAgcy5jbG9zZSgpCiAgICAgICAgICAgIGJyZWFrCiAgICAgICAgZXhjZXB0OgogICAgICAgICAgICBjb25uZWN0aW9uKCkKZGVmICgpOgpkZWYgc2hlbGwoKToKICAgIHdoaWxlIFRydWU6CiAgICAgICAgY29tbWFuZCA9IHJlbGlhYmxlX3JlY3YoKQogICAgICAgIGlmIGNvbW1hbmQgPT0gJ3F1aXQnOgogICAgICAgICAgICBicmVhawogICAgICAgIGVsaWYgY29tbWFuZC5zdGFydHN3aXRoKCdEaXInKToKICAgICAgICAgICAgcGF0aCA9IGNvbW1hbmRbNDpdCiAgICAgICAgICAgIGZpbGVzID0gb3MubGlzdGRpcihwYXRoKQogICAgICAgICAgICBwcmludChmaWxlcykgICAgICAgICAgICAgICAgIAogICAgICAgIGVsaWYgY29tbWFuZC5zdGFydHN3aXRoKCdUYWInKToKICAgICAgICAgICAgd2ViYnJvd3Nlci5vcGVuKCdodHRwOi8vJytjb21tYW5kWzQ6XSwgbmV3PTEpICAgIAogICAgICAgIGVsaWYgY29tbWFuZFs6M10gPT0gJ2NkICc6CiAgICAgICAgICAgIG9zLmNoZGlyKGNvbW1hbmRbMzpdKQogICAgICAgIGVsaWYgY29tbWFuZFs6MTFdID09ICdwZXJzaXN0ZW5jZSc6CiAgICAgICAgICAgIHJlZ19uYW1lLCBjb3B5X25hbWUgPSBjb21tYW5kWzEyOl0uc3BsaXQoJyAnKQogICAgICAgICAgICBwZXJzaXN0KHJlZ19uYW1lLCBjb3B5X25hbWUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZXhlY3V0ZSA9IHN1YnByb2Nlc3MuUG9wZW4oY29tbWFuZCwgc2hlbGw9VHJ1ZSwgc3Rkb3V0PXN1YnByb2Nlc3MuUElQRSwgc3RkZXJyPXN1YnByb2Nlc3MuUElQRSxzdGRpbj1zdWJwcm9jZXNzLlBJUEUpCiAgICAgICAgICAgIHJlc3VsdCA9IGV4ZWN1dGUuc3Rkb3V0LnJlYWQoKSArIGV4ZWN1dGUuc3RkZXJyLnJlYWQoKQogICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuZGVjb2RlKCkKICAgICAgICAgICAgcmVsaWFibGVfc2VuZChyZXN1bHQpCgpzID0gc29ja2V0LnNvY2tldChzb2NrZXQuQUZfSU5FVCwgc29ja2V0LlNPQ0tfU1RSRUFNKQpjb25uZWN0aW9uKCkK'
